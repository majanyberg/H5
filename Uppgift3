// QUESTION 3

// Copy-and-paste your d_split_list function for Question 1 here.
function d_split_list(xs) {

    // *** Your answer here. ***
    const new_list = list();
    const length_of_xs = length(xs);
    if (length_of_xs%2 === 0){
        
        return split_list(xs,length_of_xs/2, 0, new_list);
    }
    else {
        return split_list(xs, ((length_of_xs-1)/2 + 1), 0, new_list);
    }
        
}

function split_list(xs, n, counter, lists){
    return counter === n
            ? pair(lists, xs)
            : split_list(remove(list_ref(xs, 0), xs),n, counter + 1, 
                append(lists, list(list_ref(xs, 0))));
}

// Copy-and-paste your d_merge function for Question 2 here.
function d_merge(xs, ys) {
    
    // *** Your answer here. ***
    const new_list = append(xs, ys);
    return sort(new_list);
}

function sort(xs) {
    if (is_null(xs)){
        return xs;
    }
    else {
        const small = accumulate((x,y) => x < y ? x : y, 
            head(xs), tail(xs)); //is head() and tail() allowed?
        
        return append(list(small), sort(remove(small, xs)));
    }
}
function d_merge_sort(xs) {

    // *** Your answer here. ***
    const split_list = d_split_list(xs);
    
    const sorted_list = d_merge(head(split_list), tail(split_list));
    return sorted_list;
}

// TEST:
const my_list = list(7, 2, 4, 6, 9, 1, 5, 8, 3, 6);
d_merge_sort(my_list);
