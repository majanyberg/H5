//Maja Nyberg och Eric Buxton

// QUESTION 3

// Copy-and-paste your d_split_list function for Question 1 here.

function d_split_list(xs) {

    // *** Your answer here. ***
    
    function tail_of_pair(xs, middle){
        
        if (length_of_xs % 2 === 0){
            
            return even_list(xs, middle);
        }
        else {
            return odd_list(xs, middle);
        }
    }
    function even_list(xs, middle){
                return !(middle > 0)
                ? xs
                : even_list(tail(xs), middle-1);
            }
            
    function odd_list(xs, middle){
                return !(middle >= 0)
                ? xs
                : odd_list(tail(xs), middle-1);
            }
        
    function head_of_pair(xs){
        if (is_null(xs)){
            
            return xs;
            
        } else if (n< length_of_xs/2){
            
            n = n+1;
            
            set_tail(xs, head_of_pair(tail(xs)));
            
            return xs;
            
        } else {
            
            return head_of_pair(tail(xs));
            
        }
    }
    
    
    const length_of_xs = length(xs);
    let n = 0;
    
    const tail_pair = tail_of_pair(xs, length_of_xs/2);
    const head_pair = head_of_pair(xs);
    
    return pair(head_pair, tail_pair);
    
}

// Copy-and-paste your d_merge function for Question 2 here.
// QUESTION 2

function d_merge(xs, ys) {
    // *** Your answer here. **
    
function m_append(xs, ys) {
    
    if (is_null(tail(xs))) {
            set_tail(xs, ys);
        } else if (head(tail(xs)) > head(ys)){
            
                const save = tail(xs); //save the previous tail before mutating
                set_tail(xs, ys);
                m_append(tail(xs), save);
        }
         else {
                
                m_append(tail(xs), ys);
         }
            
    
}
    if (head(ys) > head(xs)){
        m_append(xs, ys);
        return xs;
    }
    else{
        m_append(ys, xs);
        return ys;
    }
    return m_append(xs, ys);
}


function d_merge_sort(xs) {
    //Not solved, something wrong in d_split_list here but not in Uppgift 1
    // *** Your answer here. ***
            const split_list = d_split_list(xs);
            const sorted_list = d_merge(head(split_list), tail(split_list));
            return sorted_list;

    
}
    
    
    

// TEST:
const my_list = list(7, 2, 4, 6, 9, 1, 5, 8, 3, 6);
d_merge_sort(my_list);
